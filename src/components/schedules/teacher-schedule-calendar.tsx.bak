'use client';

import { useState, useMemo, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Chip,
  Stack,
  Tooltip,
  Avatar,
  useTheme,
  alpha,
  useMediaQuery,
  Card,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Badge,
  CircularProgress,
  Divider,
  IconButton
} from '@mui/material';
import { Grid } from '@/components/common/grid';
import { TeacherSchedule, TeacherTimeSlot } from '@/types';
import { CaretDown, Clock, MapPin, Calendar, CheckCircle, InfoCircle, Calendar as CalendarIcon } from '@phosphor-icons/react';
import { format, parseISO, isSameDay } from 'date-fns';
import { vi } from 'date-fns/locale/vi';

// Color definitions for status
const STATUS_COLORS = {
  'available': '#4caf50',  // Green
  'teaching': '#f44336',   // Red
  'unavailable': '#9e9e9e' // Grey
};

const STATUS_LABELS = {
  'available': 'Có thể dạy',
  'teaching': 'Đang dạy',
  'unavailable': 'Không khả dụng'
};

const PERIOD_LABELS = {
  'morning': 'Sáng',
  'afternoon': 'Chiều',
  'evening': 'Tối'
};

interface TeacherScheduleCalendarProps {
  scheduleData: TeacherSchedule;
}

export function TeacherScheduleCalendar({ scheduleData }: TeacherScheduleCalendarProps) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [selectedTeacher, setSelectedTeacher] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  
  // Lấy danh sách giáo viên
  const teacherList = useMemo(() => Object.keys(scheduleData), [scheduleData]);
  
  // Thiết lập giáo viên mặc định nếu chưa chọn - chỉ chạy một lần khi component mount
  useEffect(() => {
    if (!selectedTeacher && teacherList.length > 0) {
      setSelectedTeacher(teacherList[0]);
    }
  }, [teacherList, selectedTeacher]);
  
  // Lấy ngày hiện tại
  const currentDate = new Date();
  
  // Xử lý thay đổi giáo viên
  const handleTeacherChange = (event: any) => {
    setLoading(true);
    setSelectedTeacher(event.target.value);
    setTimeout(() => setLoading(false), 300);
  };

  // Lấy dữ liệu lịch của giáo viên đã chọn
  const teacherData = useMemo(() => {
    if (!selectedTeacher) return [];
    
    // Lấy tất cả dữ liệu của giáo viên đã chọn và sắp xếp theo ngày
    const data = scheduleData[selectedTeacher] || [];
    return data.sort((a, b) => {
      const dateA = parseISO(a.date);
      const dateB = parseISO(b.date);
      return dateA.getTime() - dateB.getTime();
    });
  }, [scheduleData, selectedTeacher]);
  
  // Tính tổng số slot teaching và available
  const slotStats = useMemo(() => {
    if (!selectedTeacher) return { teaching: 0, available: 0, total: 0, days: 0, current: 0 };
    
    const teacherData = scheduleData[selectedTeacher] || [];
    let teaching = 0;
    let available = 0;
    let currentWeekTeaching = 0;
    const uniqueDays = new Set();
    
    const today = new Date();
    const currentWeekStart = startOfWeek(today, { weekStartsOn: 1 });
    const currentWeekEnd = addDays(currentWeekStart, 6);
    
    teacherData.forEach(day => {
      uniqueDays.add(day.date);
      
      const dayDate = parseISO(day.date);
      const isCurrentWeek = isWithinInterval(dayDate, { 
        start: currentWeekStart,
        end: currentWeekEnd
      });
      
      day.slots.forEach(slot => {
        if (slot.status === 'teaching') {
          teaching++;
          if (isCurrentWeek) currentWeekTeaching++;
        }
        if (slot.status === 'available') available++;
      });
    });
    
    return {
      teaching,
      available,
      current: currentWeekTeaching,
      days: uniqueDays.size,
      total: teaching + available
    };
  }, [scheduleData, selectedTeacher]);

  // Hiển thị ô trạng thái cho mỗi slot
  const renderTimeSlot = (date: string, teacherName: string) => {
    const dayData = scheduleData[teacherName]?.find(day => day.date === date);
    
    if (!dayData || !dayData.slots || dayData.slots.length === 0) {
      return (
        <Box sx={{ p: 1, height: '100%', minHeight: 100, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <Typography variant="caption" color="text.secondary">Không có dữ liệu</Typography>
        </Box>
      );
    }

    // Nhóm slots theo period
    const morningSlots = dayData.slots.filter(slot => slot.period === 'morning');
    const afternoonSlots = dayData.slots.filter(slot => slot.period === 'afternoon');
    const eveningSlots = dayData.slots.filter(slot => slot.period === 'evening');
    
    const renderSlots = (slots: TeacherTimeSlot[], periodName: string) => {
      if (slots.length === 0) return null;
      
      return (
        <Box sx={{ mb: 1 }}>
          <Typography variant="caption" fontWeight="bold" sx={{ display: 'block', mb: 0.5 }}>
            {PERIOD_LABELS[periodName as keyof typeof PERIOD_LABELS]}
          </Typography>
          <Stack spacing={0.5}>
            {slots.map((slot, index) => (
              <Tooltip
                key={index}
                title={`${slot.time} - ${STATUS_LABELS[slot.status]}`}
                placement="top"
                arrow
              >
                <Chip
                  size="small"
                  label={`${slot.time}`}
                  sx={{
                    backgroundColor: alpha(STATUS_COLORS[slot.status], 0.2),
                    borderLeft: `3px solid ${STATUS_COLORS[slot.status]}`,
                    color: 'text.primary',
                    '& .MuiChip-label': {
                      px: 1
                    }
                  }}
                />
              </Tooltip>
            ))}
          </Stack>
        </Box>
      );
    };

    return (
      <Box sx={{ p: 1, height: '100%' }}>
        {renderSlots(morningSlots, 'morning')}
        {renderSlots(afternoonSlots, 'afternoon')}
        {renderSlots(eveningSlots, 'evening')}
      </Box>
    );
  };

  // Hiển thị dạng danh sách
  const renderListView = () => {
    if (!selectedTeacher) return null;
    
    const teacherData = scheduleData[selectedTeacher] || [];
    
    if (teacherData.length === 0) {
      return (
        <Box sx={{ 
          p: 5, 
          display: 'flex', 
          flexDirection: 'column',
          justifyContent: 'center', 
          alignItems: 'center',
          bgcolor: alpha(theme.palette.primary.main, 0.05),
          borderRadius: 1
        }}>
          <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
            Không có dữ liệu lịch làm việc cho giáo viên này
          </Typography>
          <Button 
            variant="outlined" 
            size="small"
            onClick={() => teacherList.length > 0 && setSelectedTeacher(teacherList[0])}
          >
            Chọn giáo viên khác
          </Button>
        </Box>
      );
    }
    
    // Sắp xếp dữ liệu theo ngày
    const sortedTeacherData = [...teacherData].sort((a, b) => {
      return new Date(a.date).getTime() - new Date(b.date).getTime();
    });
    
    // Nhóm các ngày theo tuần để hiển thị rõ ràng hơn
    const groupedByWeek: { [weekKey: string]: typeof teacherData } = {};
    
    sortedTeacherData.forEach(day => {
      const dayDate = parseISO(day.date);
      const weekStart = format(startOfWeek(dayDate, { weekStartsOn: 1 }), 'yyyy-MM-dd');
      
      if (!groupedByWeek[weekStart]) {
        groupedByWeek[weekStart] = [];
      }
      
      groupedByWeek[weekStart].push(day);
    });
    
    return (
      <Stack spacing={4}>
        {Object.entries(groupedByWeek).map(([weekStart, days], weekIndex) => (
          <Card key={weekStart} sx={{ overflow: 'visible' }}>
            <Box 
              sx={{ 
                px: 2, 
                py: 1.5, 
                bgcolor: 'primary.main', 
                color: 'primary.contrastText',
                borderTopLeftRadius: 1,
                borderTopRightRadius: 1,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between'
              }}
            >
              <Typography variant="subtitle1" fontWeight="medium">
                Tuần từ {format(parseISO(weekStart), 'dd/MM/yyyy')}
              </Typography>
              <Chip 
                size="small" 
                label={`${days.length} ngày`}
                sx={{ bgcolor: alpha('#fff', 0.2), color: '#fff' }}
              />
            </Box>
            
            <Box sx={{ p: 0 }}>
              {days.map((day, dayIndex) => {
                // Đếm số lượng các loại slot
                const teachingSlots = day.slots.filter(slot => slot.status === 'teaching');
                const availableSlots = day.slots.filter(slot => slot.status === 'available');
                
                const isToday = day.date === format(new Date(), 'yyyy-MM-dd');
                
                return (
                  <Accordion 
                    key={day.date} 
                    disableGutters 
                    defaultExpanded={isToday}
                    sx={{ 
                      boxShadow: 0,
                      '&:not(:last-child)': {
                        borderBottom: '1px solid',
                        borderColor: 'divider'
                      },
                      '&:before': {
                        display: 'none',
                      },
                    }}
                  >
                    <AccordionSummary 
                      expandIcon={<CaretDown />}
                      sx={{ 
                        px: 3,
                        backgroundColor: isToday 
                          ? alpha(theme.palette.primary.main, 0.1)
                          : 'transparent',
                        '&:hover': {
                          backgroundColor: alpha(theme.palette.primary.main, 0.05)
                        }
                      }}
                    >
                      <Stack 
                        direction="row" 
                        spacing={2} 
                        alignItems="center"
                        sx={{ width: '100%', flexWrap: { xs: 'wrap', sm: 'nowrap' } }}
                      >
                        <Box sx={{ 
                          minWidth: { xs: '100%', sm: 150 },
                          display: 'flex',
                          alignItems: 'center',
                          gap: 1
                        }}>
                          <Box sx={{ 
                            width: 36, 
                            height: 36, 
                            borderRadius: '50%', 
                            bgcolor: isToday ? 'primary.main' : 'grey.200',
                            color: isToday ? 'white' : 'text.primary',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontWeight: 'bold',
                            mr: 1
                          }}>
                            {format(parseISO(day.date), 'dd')}
                          </Box>
                          <Box>
                            <Typography variant="subtitle1" fontWeight="medium">
                              {day.weekday}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {format(parseISO(day.date), 'dd/MM/yyyy')}
                            </Typography>
                          </Box>
                        </Box>
                        
                        <Stack 
                          direction="row" 
                          spacing={1} 
                          sx={{ 
                            flex: 1,
                            mt: { xs: 1, sm: 0 },
                            ml: { xs: 1, sm: 0 }
                          }}
                          flexWrap="wrap"
                        >
                          {teachingSlots.length > 0 && (
                            <Chip 
                              size="small" 
                              label={`${teachingSlots.length} ca dạy`}
                              sx={{
                                bgcolor: alpha(STATUS_COLORS.teaching, 0.1),
                                color: STATUS_COLORS.teaching,
                                fontWeight: 'medium',
                                mb: 0.5
                              }}
                              icon={<Box sx={{ 
                                width: 8, 
                                height: 8, 
                                bgcolor: STATUS_COLORS.teaching, 
                                borderRadius: '50%',
                                ml: 1
                              }} />}
                            />
                          )}
                          
                          {availableSlots.length > 0 && (
                            <Chip 
                              size="small" 
                              label={`${availableSlots.length} ca trống`}
                              sx={{
                                bgcolor: alpha(STATUS_COLORS.available, 0.1),
                                color: STATUS_COLORS.available,
                                fontWeight: 'medium',
                                mb: 0.5
                              }}
                              icon={<Box sx={{ 
                                width: 8, 
                                height: 8, 
                                bgcolor: STATUS_COLORS.available, 
                                borderRadius: '50%',
                                ml: 1
                              }} />}
                            />
                          )}
                        </Stack>
                      </Stack>
                    </AccordionSummary>
                    
                    <AccordionDetails sx={{ px: 3, pt: 0, pb: 2 }}>
                      {(['morning', 'afternoon', 'evening'] as const).map((period) => {
                        const slots = day.slots.filter(slot => slot.period === period);
                        if (slots.length === 0) return null;
                        
                        return (
                          <Box key={period} sx={{ mt: 2 }}>
                            <Stack 
                              direction="row" 
                              alignItems="center" 
                              spacing={1} 
                              sx={{ mb: 1 }}
                            >
                              <Box sx={{ 
                                width: 10, 
                                height: 10, 
                                borderRadius: '50%', 
                                bgcolor: 'primary.main' 
                              }} />
                              <Typography 
                                variant="subtitle2" 
                                sx={{ 
                                  fontWeight: 'bold',
                                  color: 'primary.main'
                                }}
                              >
                                {PERIOD_LABELS[period]}
                              </Typography>
                            </Stack>
                            
                            <Grid container spacing={1.5}>
                              {slots.map((slot, slotIndex) => (
                                <Grid item xs={12} sm={6} md={4} key={slotIndex}>
                                  <Paper
                                    elevation={slot.status === 'teaching' ? 2 : 0}
                                    sx={{
                                      p: 1.5,
                                      borderLeft: `4px solid ${STATUS_COLORS[slot.status]}`,
                                      backgroundColor: alpha(STATUS_COLORS[slot.status], 0.1),
                                      transition: 'all 0.2s',
                                      '&:hover': {
                                        transform: 'translateY(-2px)',
                                        boxShadow: 2
                                      }
                                    }}
                                  >
                                    <Stack spacing={1}>
                                      <Stack direction="row" justifyContent="space-between" alignItems="center">
                                        <Typography variant="body2" fontWeight="bold" sx={{ fontSize: '0.9rem' }}>
                                          {slot.time}
                                        </Typography>
                                        <Chip 
                                          size="small" 
                                          label={STATUS_LABELS[slot.status]} 
                                          sx={{
                                            backgroundColor: alpha(STATUS_COLORS[slot.status], 0.2),
                                            color: STATUS_COLORS[slot.status],
                                            fontWeight: 'bold',
                                            height: 22
                                          }}
                                        />
                                      </Stack>
                                      
                                      {slot.status === 'teaching' && (
                                        <Box sx={{ 
                                          display: 'flex', 
                                          alignItems: 'center',
                                          px: 1, 
                                          py: 0.5,
                                          bgcolor: alpha(theme.palette.background.paper, 0.5),
                                          borderRadius: 0.5
                                        }}>
                                          <Typography variant="caption" color="text.secondary">
                                            Lớp: L1 - Lập trình Scratch
                                          </Typography>
                                        </Box>
                                      )}
                                    </Stack>
                                  </Paper>
                                </Grid>
                              ))}
                            </Grid>
                          </Box>
                        );
                      })}
                    </AccordionDetails>
                  </Accordion>
                );
              })}
            </Box>
          </Card>
        ))}
      </Stack>
    );
  };

  return (
    <Box>
      {/* Điều khiển lịch */}
      <Card sx={{ mb: 3, overflow: 'visible' }}>
        <Box sx={{ p: 0 }}>
          {/* Panel thông tin giáo viên */}
          {selectedTeacher && (
            <Box sx={{ 
              p: 3, 
              pb: 2,
              borderBottom: '1px solid',
              borderColor: 'divider',
              backgroundColor: alpha(theme.palette.primary.main, 0.03)
            }}>
              <Stack 
                direction={{ xs: 'column', md: 'row' }} 
                justifyContent="space-between"
                alignItems={{ xs: 'flex-start', md: 'center' }}
                spacing={2}
              >
                <Stack spacing={0.5}>
                  <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
                    {selectedTeacher}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Tổng cộng {slotStats.days} ngày làm việc, {slotStats.total} khung giờ
                  </Typography>
                </Stack>
                
                <Stack 
                  direction="row" 
                  spacing={2}
                  divider={<Divider orientation="vertical" flexItem />}
                >
                  <Box sx={{ textAlign: 'center', minWidth: 100 }}>
                    <Typography variant="h6" sx={{ color: STATUS_COLORS.teaching, fontWeight: 'bold' }}>
                      {slotStats.teaching}
                    </Typography>
                    <Typography variant="caption" fontWeight="medium" color={STATUS_COLORS.teaching}>
                      Ca dạy ({slotStats.current} tuần này)
                    </Typography>
                  </Box>
                  
                  <Box sx={{ textAlign: 'center', minWidth: 100 }}>
                    <Typography variant="h6" sx={{ color: STATUS_COLORS.available, fontWeight: 'bold' }}>
                      {slotStats.available}
                    </Typography>
                    <Typography variant="caption" fontWeight="medium" color={STATUS_COLORS.available}>
                      Ca trống
                    </Typography>
                  </Box>
                </Stack>
              </Stack>
            </Box>
          )}

          {/* Panel điều khiển */}
          <Box sx={{ p: 3 }}>
            <Stack spacing={3}>
              <Stack 
                direction={{ xs: 'column', sm: 'row' }}
                justifyContent="space-between" 
                alignItems={{ xs: 'stretch', sm: 'center' }}
                spacing={2}
              >
                <FormControl fullWidth sx={{ maxWidth: { sm: 300 } }}>
                  <InputLabel id="teacher-select-label">Giáo viên</InputLabel>
                  <Select
                    labelId="teacher-select-label"
                    value={selectedTeacher || ''}
                    onChange={handleTeacherChange}
                    label="Giáo viên"
                  >
                    {teacherList.map(teacher => (
                      <MenuItem key={teacher} value={teacher}>
                        {teacher}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                
                <Card 
                  sx={{ 
                    display: 'inline-flex',
                    boxShadow: 0,
                    border: '1px solid',
                    borderColor: 'divider',
                    borderRadius: 1,
                    overflow: 'hidden'
                  }}
                >
                  <Tabs 
                    value={viewType} 
                    onChange={handleViewChange}
                    sx={{ minHeight: 'unset' }}
                    variant="fullWidth"
                  >
                    <Tab 
                      label={
                        <Stack direction="row" spacing={0.5} alignItems="center">
                          <Box sx={{ display: 'inline-block', mr: 0.5 }}>⧉</Box>
                          <Typography variant="body2">Dạng tuần</Typography>
                        </Stack>
                      } 
                      value="week" 
                      sx={{ minHeight: 'unset', py: 1.5 }} 
                    />
                    <Tab 
                      label={
                        <Stack direction="row" spacing={0.5} alignItems="center">
                          <Box sx={{ display: 'inline-block', mr: 0.5 }}>≡</Box>
                          <Typography variant="body2">Dạng danh sách</Typography>
                        </Stack>
                      } 
                      value="list" 
                      sx={{ minHeight: 'unset', py: 1.5 }} 
                    />
                  </Tabs>
                </Card>
              </Stack>
              
              {viewType === 'week' && (
                <Stack 
                  direction="row" 
                  justifyContent="space-between" 
                  alignItems="center"
                >
                  <Box sx={{
                    px: 1.5,
                    py: 0.75,
                    borderRadius: 1,
                    bgcolor: alpha(theme.palette.primary.main, 0.1)
                  }}>
                    <Typography 
                      variant="body2" 
                      fontWeight="medium" 
                      color="primary.main"
                    >
                      {weekDisplay}
                    </Typography>
                  </Box>
                  
                  <ButtonGroup size="small" variant="outlined">
                    <Button 
                      onClick={handlePreviousWeek} 
                      startIcon={<ArrowLeft />}
                      disabled={loading}
                    >
                      Trước
                    </Button>
                    <Button 
                      onClick={handleCurrentWeek}
                      disabled={loading || currentWeekOffset === 0}
                      color="primary"
                      variant={currentWeekOffset === 0 ? "contained" : "outlined"}
                    >
                      Hiện tại
                    </Button>
                    <Button 
                      onClick={handleNextWeek} 
                      endIcon={<ArrowRight />}
                      disabled={loading}
                    >
                      Tiếp
                    </Button>
                  </ButtonGroup>
                </Stack>
              )}
            </Stack>
          </Box>
        </Box>
      </Card>

      {/* Hiển thị chú thích */}
      <Stack 
        direction="row" 
        spacing={2}
        sx={{ mb: 2 }}
        justifyContent="center" 
        alignItems="center"
        flexWrap="wrap"
      >
        {Object.entries(STATUS_LABELS).map(([status, label]) => (
          <Stack key={status} direction="row" spacing={1} alignItems="center" sx={{ mb: 1 }}>
            <Box 
              sx={{ 
                width: 12, 
                height: 12, 
                bgcolor: STATUS_COLORS[status as keyof typeof STATUS_COLORS],
                borderRadius: '50%'
              }} 
            />
            <Typography variant="caption">{label}</Typography>
          </Stack>
        ))}
      </Stack>

      {/* Hiển thị loading */}
      {loading && (
        <Box sx={{ 
          p: 3, 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center',
          bgcolor: alpha(theme.palette.primary.main, 0.05),
          borderRadius: 1
        }}>
          <Typography variant="body2" color="text.secondary">
            Đang tải dữ liệu...
          </Typography>
        </Box>
      )}

      {/* Hiển thị lịch dạng tuần */}
      {viewType === 'week' && !loading && (
        <Box 
          sx={{ 
            width: '100%', 
            overflowX: 'auto',
            '&::-webkit-scrollbar': {
              height: 8,
            },
            '&::-webkit-scrollbar-track': {
              bgcolor: 'action.hover',
            },
            '&::-webkit-scrollbar-thumb': {
              bgcolor: 'primary.light',
              borderRadius: 1,
            }
          }}
        >
          <Box sx={{ minWidth: isMobile ? 800 : 'auto' }}>
            <Grid container spacing={1}>
              {/* Header Row - Days of week */}
              {daysOfWeek.map((day, index) => {
                const isToday = day.date === format(new Date(), 'yyyy-MM-dd');
                
                return (
                  <Grid item xs={12/7} key={day.date}>
                    <Paper
                      sx={{
                        bgcolor: isToday ? 'primary.main' : 'grey.800',
                        color: 'white',
                        p: 1.5,
                        textAlign: 'center',
                        fontWeight: 'bold',
                        borderRadius: 1,
                        boxShadow: isToday ? 2 : 0
                      }}
                    >
                      <Typography variant="body2" fontWeight="bold">
                        {day.dayShort}
                      </Typography>
                      <Typography variant="h6">
                        {day.dayNumber}
                      </Typography>
                      <Typography variant="caption" fontWeight="medium">
                        {day.monthShort}
                      </Typography>
                    </Paper>
                  </Grid>
                );
              })}
              
              {/* Teacher schedule */}
              {selectedTeacher && daysOfWeek.map((day) => (
                <Grid item xs={12/7} key={`schedule-${day.date}`}>
                  <Paper
                    sx={{
                      height: '100%',
                      minHeight: 150,
                      maxHeight: 350,
                      overflowY: 'auto',
                      boxShadow: 1
                    }}
                  >
                    {renderTimeSlot(day.date, selectedTeacher)}
                  </Paper>
                </Grid>
              ))}
            </Grid>
          </Box>
        </Box>
      )}

      {/* Hiển thị dạng danh sách */}
      {viewType === 'list' && !loading && renderListView()}
    </Box>
  );
}
import dotenv from 'dotenv';
import connectDB from '../config/database';
import { Teacher, Subject, Class, Schedule } from '../models';

dotenv.config();

// Sample data - Copy t·ª´ Frontend
const teachersData = [
  {
    name: 'Nguy·ªÖn VƒÉn A',
    email: 'nguyenvana@example.com',
    phone: '0901234567',
    avatar: 'https://i.pravatar.cc/150?img=1',
    address: 'H√† N·ªôi, Vi·ªát Nam',
    joinDate: '2023-01-15',
    status: 'active',
    education: 'Th·∫°c sƒ© C√¥ng ngh·ªá Th√¥ng tin',
    bio: 'Gi√°o vi√™n gi√†u kinh nghi·ªám trong l·∫≠p tr√¨nh web',
  },
  {
    name: 'Tr·∫ßn Th·ªã B',
    email: 'tranthib@example.com',
    phone: '0912345678',
    avatar: 'https://i.pravatar.cc/150?img=2',
    address: 'TP. H·ªì Ch√≠ Minh, Vi·ªát Nam',
    joinDate: '2023-02-20',
    status: 'active',
    education: 'C·ª≠ nh√¢n Khoa h·ªçc M√°y t√≠nh',
    bio: 'Chuy√™n gia v·ªÅ l·∫≠p tr√¨nh game',
  },
  {
    name: 'L√™ VƒÉn C',
    email: 'levanc@example.com',
    phone: '0923456789',
    avatar: 'https://i.pravatar.cc/150?img=3',
    address: 'ƒê√† N·∫µng, Vi·ªát Nam',
    joinDate: '2023-03-10',
    status: 'active',
    education: 'Th·∫°c sƒ© Gi√°o d·ª•c',
    bio: 'Gi√°o vi√™n d·∫°y l·∫≠p tr√¨nh cho tr·∫ª em',
  },
  {
    name: 'Ph·∫°m Th·ªã D',
    email: 'phamthid@example.com',
    phone: '0934567890',
    avatar: 'https://i.pravatar.cc/150?img=4',
    address: 'C·∫ßn Th∆°, Vi·ªát Nam',
    joinDate: '2023-04-05',
    status: 'active',
    education: 'C·ª≠ nh√¢n C√¥ng ngh·ªá Ph·∫ßn m·ªÅm',
    bio: 'L·∫≠p tr√¨nh vi√™n chuy√™n nghi·ªáp',
  },
  {
    name: 'Ho√†ng VƒÉn E',
    email: 'hoangvane@example.com',
    phone: '0945678901',
    avatar: 'https://i.pravatar.cc/150?img=5',
    address: 'H·∫£i Ph√≤ng, Vi·ªát Nam',
    joinDate: '2023-05-12',
    status: 'active',
    education: 'Th·∫°c sƒ© Thi·∫øt k·∫ø ƒê·ªì h·ªça',
    bio: 'Chuy√™n gia thi·∫øt k·∫ø s·ªë',
  },
  {
    name: 'V≈© Th·ªã F',
    email: 'vuthif@example.com',
    phone: '0956789012',
    avatar: 'https://i.pravatar.cc/150?img=6',
    address: 'Nha Trang, Vi·ªát Nam',
    joinDate: '2023-06-18',
    status: 'active',
    education: 'C·ª≠ nh√¢n M·ªπ thu·∫≠t ƒêa ph∆∞∆°ng ti·ªán',
    bio: 'Gi·∫£ng vi√™n thi·∫øt k·∫ø s·ªë v√† UI/UX',
  },
];

const subjectsData = [
  // Web Programming
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh web - H·ªçc ph·∫ßn 1', code: 'WEB101', description: 'Kh√≥a h·ªçc v·ªÅ l·∫≠p tr√¨nh web c∆° b·∫£n - HTML, CSS.', category: 'L·∫≠p tr√¨nh Web', level: 'beginner' },
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh web - H·ªçc ph·∫ßn 2', code: 'WEB102', description: 'Kh√≥a h·ªçc v·ªÅ CSS n√¢ng cao v√† b·ªë c·ª•c responsive.', category: 'L·∫≠p tr√¨nh Web', level: 'beginner' },
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh web - H·ªçc ph·∫ßn 3', code: 'WEB103', description: 'Gi·ªõi thi·ªáu v·ªÅ JavaScript c∆° b·∫£n.', category: 'L·∫≠p tr√¨nh Web', level: 'intermediate' },
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh web - H·ªçc ph·∫ßn 4', code: 'WEB104', description: 'X√¢y d·ª±ng trang web t∆∞∆°ng t√°c v·ªõi DOM.', category: 'L·∫≠p tr√¨nh Web', level: 'intermediate' },
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh web - H·ªçc ph·∫ßn 5', code: 'WEB105', description: 'Gi·ªõi thi·ªáu ReactJS v√† component c∆° b·∫£n.', category: 'L·∫≠p tr√¨nh Web', level: 'intermediate' },

  // Game Programming
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh game - H·ªçc ph·∫ßn 1', code: 'GAME101', description: 'L√†m quen t∆∞ duy l·∫≠p tr√¨nh game.', category: 'L·∫≠p tr√¨nh Game', level: 'beginner' },
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh game - H·ªçc ph·∫ßn 2', code: 'GAME102', description: 'Thi·∫øt k·∫ø nh√¢n v·∫≠t v√† m√¥i tr∆∞·ªùng game.', category: 'L·∫≠p tr√¨nh Game', level: 'beginner' },
  { name: 'Si√™u nh√¢n l·∫≠p tr√¨nh game - H·ªçc ph·∫ßn 3', code: 'GAME103', description: 'Gi·ªõi thi·ªáu Pygame v√† ho·∫°t c·∫£nh c∆° b·∫£n.', category: 'L·∫≠p tr√¨nh Game', level: 'beginner' },

  // Kids Game
  { name: 'B√© l√†m game - H·ªçc ph·∫ßn 1', code: 'KIDGAME101', description: 'L√†m quen v·ªõi Scratch v√† l·∫≠p tr√¨nh kh·ªëi.', category: 'L·∫≠p tr√¨nh Game', level: 'beginner' },
  { name: 'B√© l√†m game - H·ªçc ph·∫ßn 2', code: 'KIDGAME102', description: 'T·∫°o nh√¢n v·∫≠t ho·∫°t h√¨nh ƒë∆°n gi·∫£n.', category: 'L·∫≠p tr√¨nh Game', level: 'beginner' },

  // Design
  { name: 'Digistyle 2025 - H·ªçc ph·∫ßn 1', code: 'DIGI25_101', description: 'Kh·ªüi ƒë·∫ßu v·ªõi thi·∫øt k·∫ø ƒë·ªì h·ªça c∆° b·∫£n.', category: 'Thi·∫øt k·∫ø s·ªë', level: 'beginner' },
  { name: 'Digistyle 2025 - H·ªçc ph·∫ßn 2', code: 'DIGI25_102', description: 'L√†m quen v·ªõi Photoshop c∆° b·∫£n.', category: 'Thi·∫øt k·∫ø s·ªë', level: 'beginner' },
];

const seed = async () => {
  try {
    console.log('üå± Starting database seeding...\n');

    // Connect to database
    await connectDB();

    // Clear existing data
    console.log('üóëÔ∏è  Clearing existing data...');
    await Promise.all([
      Teacher.deleteMany({}),
      Subject.deleteMany({}),
      Class.deleteMany({}),
      Schedule.deleteMany({}),
    ]);
    console.log('‚úÖ Existing data cleared\n');

    // Seed Teachers
    console.log('üë®‚Äçüè´ Seeding teachers...');
    const teachers = await Teacher.insertMany(teachersData);
    console.log(`‚úÖ ${teachers.length} teachers created\n`);

    // Seed Subjects (li√™n k·∫øt v·ªõi teachers)
    console.log('üìö Seeding subjects...');
    const subjectsWithTeachers = subjectsData.map((subject, index) => ({
      ...subject,
      teachers: [teachers[index % teachers.length]._id],
    }));
    const subjects = await Subject.insertMany(subjectsWithTeachers);
    console.log(`‚úÖ ${subjects.length} subjects created\n`);

    // Update teachers' subjects
    console.log('üîó Linking teachers to subjects...');
    for (let i = 0; i < teachers.length; i++) {
      const teacherSubjects = subjects
        .filter((_s, index) => index % teachers.length === i)
        .map(s => s._id);
      await Teacher.findByIdAndUpdate(teachers[i]._id, { subjects: teacherSubjects });
    }
    console.log('‚úÖ Teachers linked to subjects\n');

    // Seed Classes
    console.log('üè´ Seeding classes...');
    const classesData = [
      {
        name: 'L·ªõp Web c∆° b·∫£n K01',
        subjectId: subjects[0]._id,
        startDate: '2025-01-15',
        endDate: '2025-03-15',
        studentsCount: 15,
        status: 'active',
        teacherId: teachers[0]._id,
        description: 'L·ªõp h·ªçc l·∫≠p tr√¨nh web c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
        location: 'Ph√≤ng A101',
      },
      {
        name: 'L·ªõp Game Python K02',
        subjectId: subjects[5]._id,
        startDate: '2025-02-01',
        endDate: '2025-04-01',
        studentsCount: 12,
        status: 'active',
        teacherId: teachers[1]._id,
        description: 'L·ªõp h·ªçc l·∫≠p tr√¨nh game v·ªõi Python',
        location: 'Ph√≤ng B201',
      },
      {
        name: 'L·ªõp Thi·∫øt k·∫ø K03',
        subjectId: subjects[10]._id,
        startDate: '2025-03-01',
        endDate: '2025-05-01',
        studentsCount: 10,
        status: 'pending',
        teacherId: teachers[4]._id,
        description: 'L·ªõp h·ªçc thi·∫øt k·∫ø ƒë·ªì h·ªça c∆° b·∫£n',
        location: 'Ph√≤ng C301',
      },
    ];
    const classes = await Class.insertMany(classesData);
    console.log(`‚úÖ ${classes.length} classes created\n`);

    // Seed Schedules
    console.log('üìÖ Seeding schedules...');
    const schedulesData = [
      // Teacher 0 - Nguy·ªÖn VƒÉn A (3 schedules)
      {
        teacherId: teachers[0]._id,
        subjectId: subjects[0]._id,
        dayOfWeek: 'Th·ª© 2',
        startTime: '08:00',
        endTime: '10:00',
        room: 'A101',
        status: 'scheduled',
      },
      {
        teacherId: teachers[0]._id,
        subjectId: subjects[2]._id,
        dayOfWeek: 'Th·ª© 2',
        startTime: '13:00',
        endTime: '15:00',
        room: 'A102',
        status: 'scheduled',
      },
      {
        teacherId: teachers[0]._id,
        subjectId: subjects[1]._id,
        dayOfWeek: 'Th·ª© 5',
        startTime: '09:00',
        endTime: '11:00',
        room: 'A103',
        status: 'scheduled',
      },
      // Teacher 1 - Tr·∫ßn Th·ªã B (3 schedules)
      {
        teacherId: teachers[1]._id,
        subjectId: subjects[5]._id,
        dayOfWeek: 'Th·ª© 4',
        startTime: '07:30',
        endTime: '09:30',
        room: 'B201',
        status: 'scheduled',
      },
      {
        teacherId: teachers[1]._id,
        subjectId: subjects[3]._id,
        dayOfWeek: 'Th·ª© 3',
        startTime: '14:00',
        endTime: '16:00',
        room: 'B202',
        status: 'scheduled',
      },
      {
        teacherId: teachers[1]._id,
        subjectId: subjects[4]._id,
        dayOfWeek: 'Th·ª© 6',
        startTime: '10:00',
        endTime: '12:00',
        room: 'B203',
        status: 'scheduled',
      },
      // Teacher 2 - L√™ VƒÉn C (3 schedules)
      {
        teacherId: teachers[2]._id,
        subjectId: subjects[6]._id,
        dayOfWeek: 'Th·ª© 2',
        startTime: '09:00',
        endTime: '11:00',
        room: 'C101',
        status: 'scheduled',
      },
      {
        teacherId: teachers[2]._id,
        subjectId: subjects[7]._id,
        dayOfWeek: 'Th·ª© 4',
        startTime: '13:00',
        endTime: '15:00',
        room: 'C102',
        status: 'scheduled',
      },
      {
        teacherId: teachers[2]._id,
        subjectId: subjects[8]._id,
        dayOfWeek: 'Th·ª© 6',
        startTime: '08:00',
        endTime: '10:00',
        room: 'C103',
        status: 'scheduled',
      },
      // Teacher 3 - Ph·∫°m Th·ªã D (3 schedules)
      {
        teacherId: teachers[3]._id,
        subjectId: subjects[9]._id,
        dayOfWeek: 'Th·ª© 3',
        startTime: '10:00',
        endTime: '12:00',
        room: 'D101',
        status: 'scheduled',
      },
      {
        teacherId: teachers[3]._id,
        subjectId: subjects[0]._id,
        dayOfWeek: 'Th·ª© 5',
        startTime: '14:00',
        endTime: '16:00',
        room: 'D102',
        status: 'scheduled',
      },
      {
        teacherId: teachers[3]._id,
        subjectId: subjects[1]._id,
        dayOfWeek: 'Th·ª© 2',
        startTime: '15:00',
        endTime: '17:00',
        room: 'D103',
        status: 'scheduled',
      },
      // Teacher 4 - Ho√†ng VƒÉn E (3 schedules)
      {
        teacherId: teachers[4]._id,
        subjectId: subjects[10]._id,
        dayOfWeek: 'Th·ª© 3',
        startTime: '08:00',
        endTime: '10:00',
        room: 'C301',
        status: 'scheduled',
      },
      {
        teacherId: teachers[4]._id,
        subjectId: subjects[11]._id,
        dayOfWeek: 'Th·ª© 5',
        startTime: '11:00',
        endTime: '13:00',
        room: 'C302',
        status: 'scheduled',
      },
      {
        teacherId: teachers[4]._id,
        subjectId: subjects[2]._id,
        dayOfWeek: 'Th·ª© 6',
        startTime: '13:00',
        endTime: '15:00',
        room: 'C303',
        status: 'scheduled',
      },
      // Teacher 5 - Tr·∫ßn VƒÉn F (3 schedules)
      {
        teacherId: teachers[5]._id,
        subjectId: subjects[3]._id,
        dayOfWeek: 'Th·ª© 2',
        startTime: '10:00',
        endTime: '12:00',
        room: 'E101',
        status: 'scheduled',
      },
      {
        teacherId: teachers[5]._id,
        subjectId: subjects[5]._id,
        dayOfWeek: 'Th·ª© 4',
        startTime: '15:00',
        endTime: '17:00',
        room: 'E102',
        status: 'scheduled',
      },
      {
        teacherId: teachers[5]._id,
        subjectId: subjects[6]._id,
        dayOfWeek: 'Th·ª© 6',
        startTime: '09:00',
        endTime: '11:00',
        room: 'E103',
        status: 'scheduled',
      },
    ];
    const schedules = await Schedule.insertMany(schedulesData);
    console.log(`‚úÖ ${schedules.length} schedules created\n`);

    // Summary
    console.log('‚úÖ Database seeding completed successfully!\n');
    console.log('üìä Summary:');
    console.log(`   - Teachers: ${teachers.length}`);
    console.log(`   - Subjects: ${subjects.length}`);
    console.log(`   - Classes: ${classes.length}`);
    console.log(`   - Schedules: ${schedules.length}\n`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }
};

seed();
